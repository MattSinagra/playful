"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFileLoaderOptions = getFileLoaderOptions;
exports.issuerForStyleFiles = issuerForStyleFiles;
exports.issuerForNonStyleFiles = issuerForNonStyleFiles;
exports.issuerForJsTsFiles = issuerForJsTsFiles;
exports.issuerForNonJsTsFiles = issuerForNonJsTsFiles;
exports.getFileLoaderForJsAndStyleAssets = getFileLoaderForJsAndStyleAssets;
exports.getStyleLoaderUses = getStyleLoaderUses;
exports.getResolvedLoader = getResolvedLoader;
exports.postCssLoader = exports.lessLoader = exports.sassLoader = exports.cssLoader = exports.fileLoader = exports.babelLoader = void 0;

var _miniCssExtractPlugin = _interopRequireDefault(require("mini-css-extract-plugin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This file holds useful utility functions for file-loader
 */

/**
 * Get options for file-loader.
 *
 * This takes into account the appDir, development or production mode and
 * publicPath for file-loader usage from css files.
 *
 * @param appDir Application directory (corresponds to files[i].name).
 * @param isDev Whether this is for development or production build.
 * @param publicPath Whether to include publicPath.
 */
function getFileLoaderOptions(appDir, isDev, publicPath) {
  const fileLoaderOptions = {
    name: `[name]-[hash:8].[ext]`,
    outputPath: `${appDir}/assets/`
  };

  if (publicPath) {
    // Here mention the public path relative to the css
    // file directory. Since we are now using mini-css-extract-plugin
    // this would be always the assets directory
    fileLoaderOptions.publicPath = `assets/`;
  }

  return fileLoaderOptions;
}
/**
 * Webpack module.rules[].issuer function to check if the issuer is
 * a style file (scss, sass, css).
 */


function issuerForStyleFiles(location) {
  return /\.(sa|sc|c|le)ss$/.test(location);
}
/**
 * Webpack module.rules[].issuer function to check if the issuer is NOT
 * a style file (scss, sass, css).
 */


function issuerForNonStyleFiles(location) {
  return !/\.(sa|sc|c|le)ss$/.test(location);
}
/**
 * Webpack module.rules[].issuer function to check if the issuer is NOT a
 * JavaScript (js,jsx) or TypeScript(ts,tsx) file.
 */


function issuerForJsTsFiles(location) {
  return /\.(j|t)sx?$/.test(location);
}
/**
 * Webpack module.rules[].issuer function to check if the issuer is a JavaScript
 * (js,jsx) or TypeScript(ts,tsx) file.
 */


function issuerForNonJsTsFiles(location) {
  return !/\.(j|t)sx?$/.test(location);
}
/**
 * Get file-loader with proper options set for javascript and style files.
 *
 * It makes sure that assets are put into proper directory and relativePath
 * works fine for css imports.
 *
 * @param appDir Application directory (corresponds to files[i].name).
 * @param isDev Whether this is for development or production build.
 * @param loader Name of the loader, defaults to `file-loader`.
 */


function getFileLoaderForJsAndStyleAssets(appDir, isDev, loader = require.resolve('file-loader')) {
  // create file rules
  // But use relativePath for style type resources like sass, scss or css
  // This is needed because we can't know the absolute publicPath
  // of CSS imported assets.
  const fileLoaderTest = /\.(woff|woff2|eot|ttf|otf|png|jpg|gif)(\?v=\d+\.\d+\.\d+)?$/;
  const fileRulesNonStyle = {
    test: fileLoaderTest,
    use: [{
      loader,
      options: getFileLoaderOptions(appDir, isDev, false)
    }],
    issuer: issuerForNonStyleFiles
  };
  const fileRulesStyle = {
    test: fileLoaderTest,
    use: [{
      loader,
      options: getFileLoaderOptions(appDir, isDev, true)
    }],
    issuer: issuerForStyleFiles
  };
  return {
    fileRulesNonStyle,
    fileRulesStyle
  };
}

function getStyleLoaderUses(isDev, publicPathUrl, preprocessor) {
  const styleLoader = [{
    loader: _miniCssExtractPlugin.default.loader,
    options: {
      hmr: isDev,
      publicpath: isDev ? publicPathUrl : '',
      sourceMap: true
    }
  }, {
    loader: require.resolve('css-loader'),
    options: {
      importLoaders: preprocessor ? 2 : 1,
      sourceMap: true
    }
  }, {
    loader: require.resolve('postcss-loader'),
    options: {
      sourceMap: true
    }
  }];
  return styleLoader;
}
/**
 * Get resolved loader from @wpackio/scripts for your own usage.
 *
 * @param loader Webpack Loader.
 */


function getResolvedLoader(loader) {
  return require.resolve(loader);
} // export all built-in loaders


const babelLoader = getResolvedLoader('babel-loader');
exports.babelLoader = babelLoader;
const fileLoader = getResolvedLoader('file-loader');
exports.fileLoader = fileLoader;
const cssLoader = getResolvedLoader('css-loader');
exports.cssLoader = cssLoader;
const sassLoader = getResolvedLoader('sass-loader');
exports.sassLoader = sassLoader;
const lessLoader = getResolvedLoader('less-loader');
exports.lessLoader = lessLoader;
const postCssLoader = getResolvedLoader('postcss-loader');
exports.postCssLoader = postCssLoader;